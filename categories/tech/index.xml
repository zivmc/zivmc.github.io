<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Ziv&#39;s Blog</title>
    <link>https://zivmc.github.io/categories/tech/</link>
    <description>Recent content in tech on Ziv&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Dec 2019 16:03:01 +0800</lastBuildDate><atom:link href="https://zivmc.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android 智能指针</title>
      <link>https://zivmc.github.io/posts/android-smart-pointer/</link>
      <pubDate>Thu, 12 Dec 2019 16:03:01 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/android-smart-pointer/</guid>
      <description>最近看了下 Android 中智能指针的实现，这里简单记一下。使用的源码是 Android-8.</description>
    </item>
    
    <item>
      <title>指针、数组和 const</title>
      <link>https://zivmc.github.io/posts/pointer-array-and-const/</link>
      <pubDate>Fri, 15 Nov 2019 14:43:39 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/pointer-array-and-const/</guid>
      <description>上一篇看了初始化和未初始化的指针，这次写了几个例子接着看一下指针、数组和 const 修饰符。</description>
    </item>
    
    <item>
      <title>gdb 查看 C 中未初始化的指针</title>
      <link>https://zivmc.github.io/posts/check-pointers-with-gdb/</link>
      <pubDate>Wed, 13 Nov 2019 17:11:31 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/check-pointers-with-gdb/</guid>
      <description>C 的指针这一块学得不是特别好，最近准备深入看一下，这里先用看一下 C 中未初始化的指针相关的问题。</description>
    </item>
    
    <item>
      <title>Android 硬件抽象层相关的一组例子</title>
      <link>https://zivmc.github.io/posts/hal-examples-from-kernel-driver-to-an-application/</link>
      <pubDate>Tue, 12 Nov 2019 19:29:38 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/hal-examples-from-kernel-driver-to-an-application/</guid>
      <description>最近读了《Android 系统源代码情景分析》一书的第二章，通过一组硬件抽象层相关的例子，从内核到应用层完整地介绍了 Android 的体系结构。这组例子包括：</description>
    </item>
    
    <item>
      <title>使用 openssl 对文件签名和验签</title>
      <link>https://zivmc.github.io/posts/use-openssl-to-sign-and-verify-files/</link>
      <pubDate>Sun, 10 Nov 2019 11:31:17 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/use-openssl-to-sign-and-verify-files/</guid>
      <description>这里介绍三个点：文件签名和验签做了什么，openssl 命令行工具进行签名和验签，在 C 程序中调用 openssl 接口进行签名和验签。</description>
    </item>
    
    <item>
      <title>Nexus 5X 编译替换 AOSP msm 内核</title>
      <link>https://zivmc.github.io/posts/build-and-replace-aosp-msm-kernel/</link>
      <pubDate>Fri, 01 Nov 2019 10:32:04 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/build-and-replace-aosp-msm-kernel/</guid>
      <description>最近开始看 《Android 系统源代码情景分析》这本书，手上有一个 Nexus 5X 用来调试。这里记录一下编译替换内核的方法。</description>
    </item>
    
    <item>
      <title>subprocess 模块使用 bash 运行命令并捕捉输出</title>
      <link>https://zivmc.github.io/posts/python-subprocess-capture-output/</link>
      <pubDate>Mon, 28 Oct 2019 16:50:52 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/python-subprocess-capture-output/</guid>
      <description>背景是使用 Python 写脚本编译 Android 10 源码时，源码的某些 Makefile 文件会检查正在使用的 shell，并根据使用的 shell 是 bash 或 zsh，定义不同的 check_type() 函数：</description>
    </item>
    
    <item>
      <title>从 Android 6.0 factory image 中提取驱动</title>
      <link>https://zivmc.github.io/posts/android-6.0-extract-drivers-from-factory-image/</link>
      <pubDate>Thu, 10 Oct 2019 01:07:49 +0800</pubDate>
      
      <guid>https://zivmc.github.io/posts/android-6.0-extract-drivers-from-factory-image/</guid>
      <description>背景是 Google 的 Driver Binaries 页面不提供 Android 6.</description>
    </item>
    
  </channel>
</rss>
